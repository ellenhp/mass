// Copyright (C) 2020 Ellen Poe
//
// This file is part of MASS.
//
// MASS is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// MASS is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with MASS.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";
package api;

import "mass/api/chat.proto";
import "mass/api/spatial.proto";
import "mass/api/weapons.proto";

message DoActionRequest {
  // A repeated field containing any requests to the vessel's systems. May be
  // empty.
  repeated SystemRequest system_requests = 1;

  // Optional, a chat message to send to other players in the vessel.
  ChatMessage chat_message = 2;

  // The unique id of the scenario we're playing, provided by the client upon
  // connection.
  string scenario_id = 3;

  // The unique id of the vessel that this request belongs to. Eventually
  // replace this with auth :)
  string vessel_id = 4;
}

message DoActionResponse {}

message SystemRequest {
  oneof request {
    // Steering request.
    SteeringSystemRequest steering_request = 1;
    // Diving request.
    DivingSystemRequest diving_request = 2;
    // Propulsion request.
    PropulsionSystemRequest propulsion_request = 3;
    // Map requests.
    MapSystemRequest map_request = 4;
    // TMA requests.
    TmaSystemRequest tma_request = 5;
    // Weapon requests.
    WeaponSystemRequest weapon_request = 6;
  }
}

message SteeringSystemRequest {
  // Requested heading.
  uint32 heading_degrees = 1;
}

message DivingSystemRequest {
  // Requested depth, in feet.
  uint32 depth_feet = 1;
}

message PropulsionSystemRequest {
  // Requested speed, in knots.
  uint32 speed_knots = 1;
}

message MapSystemRequest {
  // Eventually put marking and removing POIs in here.
}

message TmaSystemRequest {
  // A sub-request to add a new TMA contact.
  message TmaAddContactSubrequest {
    // Nothing to configure.
  }
  message TmaTakeBearingSubrequest {
    // The conatct designation (S1, S2, S3) to take the bearing for.
    string designation = 1;
    // The bearing to take, in degrees (0-360) referenced from true north.
    float bearing_degrees = 2;
    // The timestamp of the bearing to take, in millis since the epoch, UTC.
    uint64 epoch_millis = 3;
  }
  message TmaMergeContactSubrequest {
    // The designations to merge.
    repeated string designations = 2;
  }
  message TmaDeleteContactSubrequest {
    // The designation to delete.
    string designation = 1;
  }
  message TmaUploadSolutionSubrequest {
    message Solution {
      // The position of the contact at the time the solution was uploaded.
      Position position = 1;
      // The speed the vessel is going in this solution, in knots.
      uint32 speed_knots = 2;
      // The heading of the vessel in this solution.
      uint32 heading_degrees = 3;
    }
    // The designation to upload a solution for.
    string designation = 1;
    // The solution itself.
    Solution solution = 2;
  }
  message TmaDeleteBearingSubrequest {
    // The designation to delete a bearing for.
    string designation = 1;
    // The timestamp of the bearing to delete, in millis since the epoch, UTC.
    uint64 epoch_millis = 2;
  }
  // Any of these subrequests can be populated.
  oneof request {
    TmaAddContactSubrequest add_contact_request = 1;
    TmaTakeBearingSubrequest take_bearing_request = 2;
    TmaMergeContactSubrequest merge_contact_request = 3;
    TmaDeleteContactSubrequest delete_contact_request = 4;
    TmaUploadSolutionSubrequest upload_solution_request = 5;
    TmaDeleteBearingSubrequest delete_bearing_request = 6;
  }
}

message WeaponSystemRequest {
  message FireWeaponRequest {
    enum GuidanceMode {
      GUIDANCE_MODE_UNKNOWN = 0;
      NONE = 1;
      ACTIVE = 2;
      PASSIVE = 3;
    }
    // The weapon to fire.
    Weapon weapon = 1;
    // The direction to fire in, relative to true north.
    uint32 heading_degrees = 2;
    // The enablement distance, if supported by this weapon, in feet.
    uint32 enable_distance_feet = 3;
    // The speed this torpedo should travel at, in knots.
    uint32 speed_knots = 4;
    // The type of guidance in use.
    GuidanceMode guidance_mode = 5;
  }
  FireWeaponRequest fire_weapon_request = 1;
}
