// Copyright (C) 2020 Ellen Poe
//
// This file is part of MASS.
//
// MASS is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// MASS is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with MASS.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";
package api;

import "mass/api/weapons.proto";

message SteeringSystem {
  // The number of degrees this system can turn per second.
  double degrees_per_second = 1;
}
message DivingSystem {
  // The number of feet this system can dive or ascend per second at neutral
  // buoyancy.
  double feet_per_second = 1;
  // The maxiumum depth (test depth) of this system in feet.
  uint32 max_depth_feet = 2;
}
message PropulsionSystem {
  // The max speed of this vessel, in knots.
  uint32 max_speed_knots = 1;
  // The acceleration of this vessel, in knots per second.
  double knots_per_second = 2;
  // Noise level of this system at rest.
  double base_noise_power = 3;
  // The additional amount of noise power generated per knot before cavitation.
  double noise_per_knot_noncavitating = 4;
}
message MapSystem {
  // There isn't really anything to put here but it'll initialize things on
  // the other end.
}
message HullSystem {
  // The draft of the vessel while surfaced.
  uint32 draft_feet = 1;
  // The sonar return of this vessel. 1 is defined as "average" since I'm a
  // dummy who doesn't know how to units.
  float sonar_return = 2;
}
message SonarSystem {
  message SonarArray {
    // The unique id of this sonar array. This only needs to be unique for this
    // particular vessel.
    string unique_id = 1;
    // The noise floor of this sonar array.
    double noise_floor = 2;
  }
  repeated SonarArray sonar_arrays = 1;
}
message TmaSystem {
  // Manual TMA, nothing to configure really.
}
message WeaponSystem {
  // The armament carried by this weapon system.
  repeated Armament armament = 1;
}
message SelfDestructSystem {
  // The kill radius of this explosive system, in feet.
  uint32 kill_radius_feet = 1;
  // The radius at which this explosie system will trigger, in feet.
  uint32 trigger_radius_feet = 2;
}
message GuidanceSystem {
  // Configuration of the homing system happens at fire-time.
}

message VesselSystem {
  oneof system {
    SteeringSystem steering_system = 1;
    DivingSystem diving_system = 2;
    PropulsionSystem propulsion_system = 3;
    MapSystem map_system = 4;
    HullSystem hull_system = 5;
    SonarSystem sonar_system = 6;
    TmaSystem tma_system = 7;
    WeaponSystem weapon_system = 8;
    SelfDestructSystem self_destruct_system = 9;
    GuidanceSystem homing_system = 10;
  }
}
