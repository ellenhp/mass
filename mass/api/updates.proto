// Copyright (C) 2020 Ellen Poe
//
// This file is part of MASS.
//
// MASS is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// MASS is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with MASS.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";
package api;

import "mass/api/chat.proto";
import "mass/api/spatial.proto";

message VesselUpdate {
  // Repeated field containing updates to various vessel systems.
  repeated SystemUpdate system_updates = 1;

  // Any new chat messages.
  repeated ChatMessage chat_updates = 2;

  // The position of the vessel as of when the update was created.
  Position position = 3;
}

message SystemUpdate {
  oneof update {
    // Steering update.
    SteeringSystemUpdate steering_update = 1;
    // Diving update.
    DivingSystemUpdate diving_update = 2;
    // Propulsion update.
    PropulsionSystemUpdate propulsion_update = 3;
    // Map update.
    MapSystemUpdate map_update = 4;
    // Hull system update.
    HullSystemUpdate hull_update = 5;
    // Sonar system update.
    SonarSystemUpdate sonar_update = 6;
  }
}

message SteeringSystemUpdate {
  // Requested heading.
  uint32 requested_heading_degrees = 1;

  // Actual heading.
  uint32 actual_heading_degrees = 2;
}

message DivingSystemUpdate {
  // Requested keel depth in feet.
  double requested_depth_feet = 1;
}

message PropulsionSystemUpdate {
  // Requested speed.
  uint32 requested_speed_knots = 1;

  // Actual speed.
  uint32 actual_speed_knots = 2;
}

message MapSystemUpdate {
  // This will eventually include map markers.
}

message HullSystemUpdate {
  // Actual depth/draft in feet.
  double actual_depth_feet = 1;
}

message SonarSystemUpdate {
  message SonarContact {
    // The vessel's unique ID.
    string vessel_id = 1;
    // Bearing from true north.
    float bearing = 2;
    // Broadband power level, in ????? units.
    float broadband_power_level = 3;
  }

  message SonarArrayUpdate {
    // The ID of this sonar array, defined in the vessel descriptor.
    string id = 1;
    // A list of contacts
    repeated SonarContact contacts = 2;
  }

  repeated SonarArrayUpdate array_updates = 1;
}
