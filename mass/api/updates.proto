// Copyright (C) 2020 Ellen Poe
//
// This file is part of MASS.
//
// MASS is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// MASS is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with MASS.  If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";
package api;

import "mass/api/chat.proto";
import "mass/api/spatial.proto";

message VesselUpdate {
  // Repeated field containing updates to various vessel systems.
  repeated SystemUpdate system_updates = 1;

  // Any new chat messages.
  repeated ChatMessage chat_updates = 2;

  // The position of the vessel as of when the update was created.
  Position position = 3;

  // Whether or not this vessel has been destroyed.
  bool is_dead = 4;
}

message SystemUpdate {
  oneof update {
    // Steering update.
    SteeringSystemUpdate steering_update = 1;
    // Diving update.
    DivingSystemUpdate diving_update = 2;
    // Propulsion update.
    PropulsionSystemUpdate propulsion_update = 3;
    // Map update.
    MapSystemUpdate map_update = 4;
    // Hull system update.
    HullSystemUpdate hull_update = 5;
    // Sonar system update.
    SonarSystemUpdate sonar_update = 6;
    // TMA update.
    TmaSystemUpdate tma_update = 7;
  }
}

message SteeringSystemUpdate {
  // Requested heading.
  uint32 requested_heading_degrees = 1;

  // Actual heading.
  uint32 actual_heading_degrees = 2;
}

message DivingSystemUpdate {
  // Requested keel depth in feet.
  double requested_depth_feet = 1;
}

message PropulsionSystemUpdate {
  // Requested speed.
  uint32 requested_speed_knots = 1;

  // Actual speed.
  uint32 actual_speed_knots = 2;
}

message MapSystemUpdate {
  message MapContact {
    // The designation, e.g. S1, M2.
    string designation = 1;
    // The position to plot the contact at.
    Position position = 2;
    // The heading to plot on the map, in degrees (0-360)
    uint32 heading_degrees = 3;
  }
  // The contacts to plot.
  repeated MapContact contacts = 1;
}

message HullSystemUpdate {
  // Actual depth/draft in feet.
  double actual_depth_feet = 1;
}

message SonarSystemUpdate {
  message SonarContact {
    // The vessel's unique ID.
    string vessel_id = 1;
    // Bearing from true north.
    float bearing = 2;
    // Broadband power level, in ????? units.
    float broadband_power_level = 3;
  }

  message SonarArrayUpdate {
    // The ID of this sonar array, defined in the vessel descriptor.
    string id = 1;
    // A list of contacts
    repeated SonarContact contacts = 2;
  }

  // Sonar array updates, including contact information.
  repeated SonarArrayUpdate array_updates = 1;
  // The depth below the keel, in feet.
  uint32 depth_below_keel_feet = 2;
}

message TmaSystemUpdate {
  message TmaContact {
    message Bearing {
      // The bearing of the contact at this moment in time, in degrees (0-360)
      // relative to true north.
      float bearing_degrees = 1;
      // The position this bearing was taken from.
      Position location = 2;
      // The time this bearing was taken, in milliseconds since the epoch in
      // UTC.
      uint64 epoch_millis = 3;
    }
    message Solution {
      // The time this solution was uploaded.
      uint64 epoch_millis = 1;
      // The position of the contact at the time the solution was uploaded.
      Position position = 2;
      // The speed the vessel is going in this solution, in knots.
      uint32 speed_knots = 3;
      // The heading of the vessel in this solution, in degrees (0-360).
      uint32 heading_degrees = 4;
    }
    // Designation (e.g. S1, S2, S3)
    string designation = 1;
    // The bearings taken for this contact.
    repeated Bearing bearings = 2;
    // The solution for this contact, if any.
    Solution solution = 3;
  }
  // The list of contacts stored in this TMA system.
  repeated TmaContact contacts = 1;
}
